DONE --- change crud operations like in db
DONE --- create connection with jupyter lab
DONE --- send code there
test it (needs more complex tests)
link jl results to student and question id (nu cred ca trebuie de fapt)
DONE --- login/signup
design
react???
DONE --- create links between tables
add field if no of questions has been met
DONE --- calculate score for student
DONE --- table students result operations --- add score and result
DONE --- fix ids when displaying for see all and update
delete quiz even though it has questions!!!
DONE --- create tests for repo and controller

---- DONE
renunta la usertTestResults
tine doar un double in student
si fa retrieve doar la nume si score

DONE --- when adding a new problem add also the input type for validating data + validating data --- merge pt problem, trebuie si pt question
DONE --- schimba la question adauga fieldurile
repara testele



create another table user-lesson where keep track of all lessons completed by a user
??? how to do that  - many to many with additional flag
DONE --- check if all lessons of a course are completed - if yes mark the course as completed
DONE --- when viewing a course only see the completed lessons - if none is completed have access only on the first lesson
DONE --- in lesson page enable disable prev next buttons based on completeness
DONE --- when entering a lesson check if problem already solved - if yes mak as solve and also mark lesson as completed if score is 100


for enrol to course:
DONE    - make call to back
DONE    - if user already enrolled - display enrolled message ind=stead of start button
DONE    - check in db if the course exists for student
DONE    - when enrolling - navigate to first lesson
DONE    - also when enrolling check the first lesson checkbox and remove lock icon
DONE    - after enrolling add a checkbox near course title which will be automatically checked when course is done

DONE --- also in course page always check if already enrolled - if yes unblock all lessons that are done, if none is done only lesson no 1


create a new table: user,lesson, courseId, completed(true/false)
DONE    - many to many between user - lesson (embededId)
methods:
DONE    - check if a lesson is complete
DONE    - change flag if lesson is complete
DONE    - check if all lessons from a course are completed
DONE    - add lessons for user in this table when enrol button is click (all lessons of a course with flag false)


DONE !!!! user enrol to course doesnt work bc i changed fetch type to lazy, if i let it ear app crashes !!!!

DONE    - in lesson page for lesson no 1 disable back button
DONE    - for last lesson when clicking next back to course page
DONE    - enable next button only when isCompleted = 100 and go to lessonNextNo


DONE ---- !!! logout !!!

TODO - backend
DONE    - when compiling code check if there exists a method for splitting string
DONE    - check if code is with print
    - check if there is an error compiling
DONE    - make a call for developer method


frontend
DONE    - my profile page (edit profile + my courses + my problems)
DONE    - problem page
DONE    - developer section
DONE    - navbars - dropdown
DONE    - navbars

DONE --- !!! compute the course time to complete !!!

I think I have to create one more navbar but not sure - look into it



code snippets for jupyter calls:
primes:
{
    "code": "def isPrim(a):\n if (a < 2 or (a > 2 and a % 2 == 0)): \n\t return False \n for d in range(3, a, 2): \n\t if (a % d == 0): \n\t\t return False\n return True",
    "valuesType": "Integer",
    "valuesToCheckCode": "2;3;4",
    "resultsToCheckCode": "True; True; False",
    "returnType": "RETURN"
}

vowels:
{
    "code": "def noVowels(word):\n\t nr = 0 \n\t for letter in word: \n\t\t if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n\t\t\t nr += 1\n\t return nr",
    "valuesType": "String",
    "valuesToCheckCode": "abcdaae;aaaaa;dfsgt",
    "resultsToCheckCode": "4; 5; 0",
    "returnType": "RETURN"
}

seqOfEvenNo
{
    "code": "def seqOfEvenNo(seq): \n\t for elem in seq: \n\t\t if elem % 2 == 1: \n\t\t\t return False \n\t return True",
    "valuesType": "List",
    "valuesToCheckCode": "[2, 4, 6]; [1,2,4]; [4,5,6]; [8,8,8,8,8,8,9]",
    "resultsToCheckCode": "True; False; False; False",
    "returnType": "RETURN"
}

seqOfPrimes
{
    "code": "def seqOfPrimes(seq): \n\tfor elem in seq: \n\t\tif not isPrime(elem): \n\t\t\treturn False\n\treturn True \ndef isPrime(a): \n\tif (a < 2 or (a > 2 and a % 2 == 0)): \n\t\treturn False \n\tfor d in range(3, a, 2): \n\t\tif (a % d == 0): \n\t\t\treturn False \n\treturn True",
    "valuesType": "List",
    "valuesToCheckCode": "[2,3,5]; [7,8,9,10]; [11,11,11,11,11]; [11,11,11,11,11,1]",
    "resultsToCheckCode": "True; False; True; True",
    "returnType": "RETURN"
}

print
{
    "code": "print('hello')",
    "valuesType": "String",
    "valuesToCheckCode": "",
    "resultsToCheckCode": "",
    "returnType": "PRINT"
}




